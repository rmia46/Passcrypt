name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-upload:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux-x64, linux-arm64, windows, macos]
        include:
          - os: linux-x64
            asset_name: passcrypt-linux-x64
            upload_name: passcrypt-linux-x64
          - os: linux-arm64
            asset_name: passcrypt-linux-arm64
            upload_name: passcrypt-linux-arm64
          - os: windows
            asset_name: passcrypt-windows
            upload_name: passcrypt-windows.exe
          - os: macos
            asset_name: passcrypt-macos
            upload_name: passcrypt-macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # üêß Cross-compile ARM64 using QEMU and Docker
      - name: Build ARM64 binary (Docker emulation)
        if: matrix.os == 'linux-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support
          docker run --rm -v $PWD:/src --platform linux/arm64 python:3.10 bash -c "
            cd /src && pip install pyinstaller -r requirements.txt && \
            pyinstaller --onefile --name passcrypt-linux-arm64 passcrypt.py
          "

      # üñ•Ô∏è Normal native builds for other platforms
      - name: Build binary (x64/mac/win)
        if: matrix.os != 'linux-arm64'
        run: |
          if [ '${{ matrix.os }}' = 'linux-x64' ]; then
            pyinstaller --onefile --name passcrypt-linux-x64 passcrypt.py
          elif [ '${{ matrix.os }}' = 'windows' ]; then
            pyinstaller --onefile --name passcrypt-windows.exe passcrypt.py
          elif [ '${{ matrix.os }}' = 'macos' ]; then
            pyinstaller --onefile --name passcrypt-macos passcrypt.py
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/${{ matrix.upload_name }}
          asset_name: ${{ matrix.upload_name }}
          asset_content_type: application/octet-stream

