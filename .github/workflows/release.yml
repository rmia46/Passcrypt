# .github/workflows/release.yml
# This workflow builds and releases the PassCrypt executable for multiple platforms.

name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger the workflow on version tags like v1.0, v2.1, etc.

jobs:
  # Job 1: Create a draft release on GitHub.
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: PassCrypt ${{ github.ref }}
          body: "Official release for PassCrypt version ${{ github.ref_name }}."
          draft: false
          prerelease: false

  # Job 2: Build the executables for each platform and upload them to the release.
  build-and-upload:
    needs: create-release
    strategy:
      matrix:
        # Define the build matrix for each target platform.
        # Each entry will spawn a separate job running on the specified OS.
        include:
          - os: ubuntu-latest
            target: linux-x64
            asset_name: passcrypt-linux-x64
          - os: windows-latest
            target: windows
            asset_name: passcrypt-windows.exe
          - os: macos-latest
            target: macos
            asset_name: passcrypt-macos
          # ARM64 is a special case that requires cross-compilation via Docker/QEMU
          - os: ubuntu-latest
            target: linux-arm64
            asset_name: passcrypt-linux-arm64

    # The runner OS is now determined by the matrix.
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      # --- Build Steps for each Platform ---

      - name: Build binary for Linux (x64)
        if: matrix.target == 'linux-x64'
        run: pyinstaller --onefile --name ${{ matrix.asset_name }} passcrypt.py

      - name: Build binary for Windows
        if: matrix.target == 'windows'
        run: pyinstaller --onefile --name ${{ matrix.asset_name }} passcrypt.py

      - name: Build binary for macOS
        if: matrix.target == 'macos'
        run: pyinstaller --onefile --name ${{ matrix.asset_name }} passcrypt.py

      - name: Build binary for Linux (ARM64) with Docker
        if: matrix.target == 'linux-arm64'
        run: |
          sudo apt-get update && sudo apt-get install -y qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker run --rm -v ${{ github.workspace }}:/src --platform linux/arm64 python:3.10-slim-bullseye \
          bash -c "pip install pyinstaller -r /src/requirements.txt && \
                   pyinstaller --onefile --name ${{ matrix.asset_name }} /src/passcrypt.py"

      # --- Upload Step ---

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
